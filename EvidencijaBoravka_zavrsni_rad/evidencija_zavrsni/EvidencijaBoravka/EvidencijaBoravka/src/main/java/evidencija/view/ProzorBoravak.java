/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package evidencija.view;

import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.components.TimePickerSettings;
import evidencija.controller.ObradaBoravak;
import evidencija.controller.ObradaOdjel;
import evidencija.model.Boravak;
import evidencija.model.Odjel;
import evidencija.util.Alati;
import evidencija.util.EvidencijaException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author petar
 */
public class ProzorBoravak extends javax.swing.JFrame implements EvidencijaViewSucelje{
    
    private ObradaBoravak obrada;
    
    /**
     * Creates new form ProzorBoravak
     */
    public ProzorBoravak() {
        initComponents();
        setTitle(Alati.NAZIV_APP + " | BORAVAK");
        obrada= new ObradaBoravak();
        ucitajOdjele();
        definirajDatumPrimitka();
        definirajDatumOtpusta();
        ucitaj();
        
    }

    
    private void definirajDatumOtpusta(){
        DatePickerSettings dps= new DatePickerSettings(Locale.of("hr","HR"));
        dps.setFormatForDatesCommonEra("dd.MM.YYYY");
        dps.setTranslationClear("Očisti");
        dps.setTranslationToday("Danas");
        dtpDatumOtpusta.datePicker.setSettings(dps);
        
        TimePickerSettings tps= dtpDatumOtpusta.timePicker.getSettings();
        
        tps.setFormatForDisplayTime("HH:mm");
        tps.use24HourClockFormat();
        ArrayList<LocalTime> lista= new ArrayList<>();
        for(int i=0;i<24;i++){
            for(int j=0;j<60;j++){
                lista.add(LocalTime.of(i,j));
            }
        
        }
        tps.generatePotentialMenuTimes(lista);
        
    }
    
    private void definirajDatumPrimitka(){
        DatePickerSettings dps = new DatePickerSettings(Locale.of("hr","HR"));
         dps.setFormatForDatesCommonEra("dd. MM. YYYY.");
         dps.setTranslationClear("Očisti");
         dps.setTranslationToday("Danas");
         dtpDatumPrimitka.datePicker.setSettings(dps);
         
         TimePickerSettings tps = dtpDatumPrimitka.timePicker.getSettings();
    
         tps.setFormatForDisplayTime("HH:mm");
         tps.use24HourClockFormat();
         
         ArrayList<LocalTime> lista = new ArrayList<>();
         for(int i =0;i<24;i++){
             for(int j = 0;j<60;j=j+10){
                 lista.add(LocalTime.of(i,j));
             }
         }
         
         tps.generatePotentialMenuTimes(lista);
         
        
    }
    
    private void ucitajOdjele(){
        DefaultComboBoxModel<Odjel> m = new DefaultComboBoxModel<>();
        
        Odjel o = new Odjel();
        o.setSifra(0);
        o.setNaziv("Odaberite odjel");
        m.addElement(o);
        
        m.addAll(new ObradaOdjel().read());
        
        cmbOdjeli.setModel(m);
        cmbOdjeli.repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstPodaci = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        cmbOdjeli = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        dtpDatumPrimitka = new com.github.lgooddatepicker.components.DateTimePicker();
        jLabel5 = new javax.swing.JLabel();
        dtpDatumOtpusta = new com.github.lgooddatepicker.components.DateTimePicker();
        btnDodaj = new javax.swing.JButton();
        btnPromjena = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lstPodaci.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstPodaciValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstPodaci);

        jLabel2.setText("Odjel");

        jLabel4.setText("Datum primitka");

        jLabel5.setText("Datum opusta");

        btnDodaj.setText("Dodaj");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnPromjena.setText("Promjeni");
        btnPromjena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromjenaActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obriši");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(dtpDatumOtpusta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(dtpDatumPrimitka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbOdjeli, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDodaj)
                        .addGap(27, 27, 27)
                        .addComponent(btnPromjena))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(btnObrisi)))
                .addGap(0, 85, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dtpDatumPrimitka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dtpDatumOtpusta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbOdjeli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDodaj)
                            .addComponent(btnPromjena))
                        .addGap(35, 35, 35)
                        .addComponent(btnObrisi)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lstPodaciValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstPodaciValueChanged
        if (evt.getValueIsAdjusting()) {
            return;
        }

        if (lstPodaci.getSelectedValue() == null) {
            return;
        }

        obrada.setEntitet(lstPodaci.getSelectedValue());

        popuniView();
    }//GEN-LAST:event_lstPodaciValueChanged

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed

        obrada.setEntitet(new Boravak());
        popuniModel();
        try {
            obrada.create();
            ucitaj();
        } catch (EvidencijaException ex) {
            JOptionPane.showMessageDialog(getRootPane(), ex.getPoruka());

        }
    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnPromjenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromjenaActionPerformed
        if(lstPodaci.getSelectedValue()==null){
            return;
        }

        var e = lstPodaci.getSelectedValue();

        obrada.setEntitet(e);
        popuniModel();

        try {
            obrada.update();
            ucitaj();
        } catch (EvidencijaException ex) {
            JOptionPane.showMessageDialog(getRootPane(), ex.getMessage());
            // napraviti refresh
            obrada.refresh();
        }

    }//GEN-LAST:event_btnPromjenaActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        if(lstPodaci.getSelectedValue()==null){
            return;
        }

        var e = lstPodaci.getSelectedValue();

        if (JOptionPane.showConfirmDialog(getRootPane(), e , "Sigurno obrisati?",
            JOptionPane.YES_NO_OPTION)!=JOptionPane.YES_OPTION){
        return;
        }

        obrada.setEntitet(e);

        try {
            obrada.delete();
            ucitaj();
        } catch (EvidencijaException ex) {
            JOptionPane.showMessageDialog(getRootPane(), ex.getPoruka());
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnPromjena;
    private javax.swing.JComboBox<Odjel> cmbOdjeli;
    private com.github.lgooddatepicker.components.DateTimePicker dtpDatumOtpusta;
    private com.github.lgooddatepicker.components.DateTimePicker dtpDatumPrimitka;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Boravak> lstPodaci;
    // End of variables declaration//GEN-END:variables

    @Override
    public void ucitaj() {
        DefaultListModel<Boravak> m = new DefaultListModel<>();
        m.addAll(obrada.read());
        lstPodaci.setModel(m);
        lstPodaci.repaint();
    }

    @Override
    public void popuniModel() {
        var e=obrada.getEntitet();
        
        LocalDate ld = dtpDatumPrimitka.datePicker.getDate();
        LocalTime lt = dtpDatumPrimitka.timePicker.getTime();

        LocalDateTime ldt = LocalDateTime.of(ld, lt);

        e.setDatumPrimitka(Date.from(ldt.atZone(ZoneId.systemDefault()).toInstant()));

       
    
        LocalDate ldd = dtpDatumOtpusta.datePicker.getDate();
        LocalTime ltt = dtpDatumOtpusta.timePicker.getTime();

        LocalDateTime ldtl = LocalDateTime.of(ld, lt);

        e.setDatumPrimitka(Date.from(ldt.atZone(ZoneId.systemDefault()).toInstant()));

        
        e.setOdjel((Odjel)cmbOdjeli.getSelectedItem());
    }

    @Override
    public void popuniView() {
        var e=obrada.getEntitet();
       
        if(e.getDatumPrimitka()==null){
            dtpDatumPrimitka.datePicker.setDate(null);
            //dtpDatumPrimitka.datePicker.setTime(null);
        }else{
            LocalDate ld= e.getDatumPrimitka().toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDate();
            dtpDatumPrimitka.datePicker.setDate(ld);
            
            LocalTime lt=e.getDatumPrimitka().toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalTime();
            dtpDatumPrimitka.timePicker.setTime(lt);
        }
        
        
        
         if(e.getDatumOtpusta()==null){
            dtpDatumOtpusta.datePicker.setDate(null);
            //dtpDatumPrimitka.datePicker.setTime(null);
        }else{
            LocalDate ld= e.getDatumOtpusta().toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDate();
            dtpDatumOtpusta.datePicker.setDate(ld);
            
            LocalTime lt=e.getDatumOtpusta().toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalTime();
            dtpDatumOtpusta.timePicker.setTime(lt);
        }
         cmbOdjeli.setSelectedItem(e.getOdjel());
    
    }
}
